#server.port=${PORT:8090}
logging.level.org.atmosphere = warn
spring.mustache.check-template-location = false

# Launch the default browser when starting the application in development mode
vaadin.launch-browser=false
# To improve the performance during development.
# For more information https://vaadin.com/docs/flow/spring/tutorial-spring-configuration.html#special-configuration-parameters
vaadin.whitelisted-packages = com.vaadin,org.vaadin,dev.hilla,com.springbootvaadin.application

##########
#keycloak.auth-server-url=http://localhost:8080
#keycloak.realm=myrealm
#keycloak.resource=springboot-keycloak
#keycloak.public-client=true
#
#keycloak.security-constraints[0].authRoles[0]=admin
#keycloak.security-constraints[0].securityCollections[0].patterns[0]=/*
#
#keycloak.principal-attribute=preferred_username

# Run on port 8081 to avoid a conflict with Keycloak
server.port=8091
# Configure a timeout (ridiculously small to make demoing easier)
#server.servlet.session.timeout=5m
# Reduce the heartbeat interval so that we get multiple ones before the session times out
vaadin.heartbeatInterval=10
# Don't let the heartbeat keep the sessions alive indefinitely
vaadin.closeIdleSessions=true
# Always use SSL. In this case, we're using a self-signed certificate but in a real application we would of course use a proper certificate.
#server.ssl.key-alias=baeldung
#server.ssl.key-store=classpath:keystore/baeldung.p12
#server.ssl.key-store-password=password
#server.ssl.enabled=false
# First, we need to tell the application where to find our Keycloak instance (in a real application, Keycloak would also be using HTTPS)
#spring.security.oauth2.client.provider.keycloak.issuer-uri=https://woyo-test.brain-behind.com:8443/realms/myrealm


#spring.security.oauth2.client.registration.oauth2-demo-thymeleaf-client.client-id=springboot-keycloak
#spring.security.oauth2.client.registration.oauth2-demo-thymeleaf-client.client-secret=cfb9de8d-95aa-4f42-92a8-ba7ca35082ae
#spring.security.oauth2.client.registration.oauth2-demo-thymeleaf-client.scope=openid, profile, roles
#spring.security.oauth2.client.registration.oauth2-demo-thymeleaf-client.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.oauth2-demo-thymeleaf-client.redirect-uri=http://keycloak:8080/login/oauth2/code/springboot-keycloak

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://35.174.19.37:8080/auth/realms/myrealm
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/master
# Second, we need to tell the application what info to pass to the Keycloak instance
spring.security.oauth2.client.registration.keycloak.client-id=springboot-keycloak
spring.security.oauth2.client.registration.keycloak.resource=springboot-keycloak
#spring.security.oauth2.client.registration.keycloak.client-secret=bOeY0LnEthdGrbKx1EItsCTYYdJK4OPM  <v15x.0  >v19.0.1
#spring.security.oauth2.client.registration.keycloak.client-secret=Hi5hNI30LA9lqL1UYXgxi4do2UHQAg81
#spring.security.oauth2.client.registration.keycloak.client-secret=nbk4ZhWMbCpFZFjOcvRKgUAQIyDcH7u7
spring.security.oauth2.client.registration.keycloak.client-secret=cfb9de8d-95aa-4f42-92a8-ba7ca35082ae

spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
# This registration will be used by KeycloakLookupService (a class that we have written; not part of Spring Security)
spring.security.oauth2.client.registration.keycloak-rest.provider=keycloak
spring.security.oauth2.client.registration.keycloak-rest.client-id=springboot-keycloak
spring.security.oauth2.client.registration.keycloak-rest.resource=springboot-keycloak
#spring.security.oauth2.client.registration.keycloak-rest.client-secret=bOeY0LnEthdGrbKx1EItsCTYYdJK4OPM <v15x.0  >v19.0.1
#spring.security.oauth2.client.registration.keycloak-rest.client-secret=Hi5hNI30LA9lqL1UYXgxi4do2UHQAg81
#spring.security.oauth2.client.registration.keycloak-rest.client-secret=nbk4ZhWMbCpFZFjOcvRKgUAQIyDcH7u7
spring.security.oauth2.client.registration.keycloak-rest.client-secret=cfb9de8d-95aa-4f42-92a8-ba7ca35082ae
spring.security.oauth2.client.registration.keycloak-rest.authorization-grant-type=password
# Also needed by KeycloakUserLookupService
#keycloak.rest-api-uri=https://woyo-test.brain-behind.com:8443/realms/myrealm
keycloak.rest-api-uri=http://35.174.19.37:8080/auth/realms/myrealm

#keycloak.rest-api-uri=http://localhost:8080/realms/master
#192.168.1.52
# keycloak admin console uri
#keycloak.admin-console-uri=http://localhost:8080/admin/myrealm/console/
#keycloak.admin-console-uri=https://woyo-test.brain-behind.com:8443/admin/myrealm/console/
keycloak.admin-console-uri=http://35.174.19.37:8080/admin/myrealm/console/
# Data source configuration
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:~/security-appwoyo-sample-app

spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.hibernate.ddl-auto=update
# Logging configuration
logging.level.org.vaadin.webinar.security=debug

keycloak.use-resource-role-mappings=true

#spring.mvc.view.prefix=/META-INF/resources
#spring.mvc.view.suffix=.html
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.enabled=true


# The format used for the keystore. It could be set to JKS in case it is a JKS file
#server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore/baeldung.p12
# The password used to generate the certificate
#server.ssl.key-store-password=mymoon
# The alias mapped to the certificate
#server.ssl.key-alias=baeldung


#trust store location
#trust.store=classpath:keystore/baeldung.p12
#trust store password
#trust.store.password=mymoon
